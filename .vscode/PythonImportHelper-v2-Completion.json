[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "SpellChecker",
        "importPath": "spellchecker",
        "description": "spellchecker",
        "isExtraImport": true,
        "detail": "spellchecker",
        "documentation": {}
    },
    {
        "label": "PyPDF2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "profanity",
        "importPath": "better_profanity",
        "description": "better_profanity",
        "isExtraImport": true,
        "detail": "better_profanity",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "simpledialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "1. Number Guessing Game",
        "description": "1. Number Guessing Game",
        "peekOfCode": "lower = int(input(\"Enter Lower bound:- \"))\n# Taking Inputs\nupper = int(input(\"Enter Upper bound:- \"))\n# generating random number between\n# the lower and upper\nx = random.randint(lower, upper)\nprint(\"\\n\\tYou've only \", \n\tround(math.log(upper - lower + 1, 2)),\n\t\" chances to guess the integer!\\n\")\n# Initializing the number of guesses.",
        "detail": "1. Number Guessing Game",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "1. Number Guessing Game",
        "description": "1. Number Guessing Game",
        "peekOfCode": "upper = int(input(\"Enter Upper bound:- \"))\n# generating random number between\n# the lower and upper\nx = random.randint(lower, upper)\nprint(\"\\n\\tYou've only \", \n\tround(math.log(upper - lower + 1, 2)),\n\t\" chances to guess the integer!\\n\")\n# Initializing the number of guesses.\ncount = 0\n# for calculation of minimum number of",
        "detail": "1. Number Guessing Game",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "1. Number Guessing Game",
        "description": "1. Number Guessing Game",
        "peekOfCode": "x = random.randint(lower, upper)\nprint(\"\\n\\tYou've only \", \n\tround(math.log(upper - lower + 1, 2)),\n\t\" chances to guess the integer!\\n\")\n# Initializing the number of guesses.\ncount = 0\n# for calculation of minimum number of\n# guesses depends upon range\nwhile count < math.log(upper - lower + 1, 2):\n\tcount += 1",
        "detail": "1. Number Guessing Game",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "1. Number Guessing Game",
        "description": "1. Number Guessing Game",
        "peekOfCode": "count = 0\n# for calculation of minimum number of\n# guesses depends upon range\nwhile count < math.log(upper - lower + 1, 2):\n\tcount += 1\n\t# taking guessing number as input\n\tguess = int(input(\"Guess a number:- \"))\n\t# Condition testing\n\tif x == guess:\n\t\tprint(\"Congratulations you did it in \",",
        "detail": "1. Number Guessing Game",
        "documentation": {}
    },
    {
        "label": "\tguess",
        "kind": 5,
        "importPath": "1. Number Guessing Game",
        "description": "1. Number Guessing Game",
        "peekOfCode": "\tguess = int(input(\"Guess a number:- \"))\n\t# Condition testing\n\tif x == guess:\n\t\tprint(\"Congratulations you did it in \",\n\t\t\tcount, \" try\")\n\t\t# Once guessed, loop will break\n\t\tbreak\n\telif x > guess:\n\t\tprint(\"You guessed too small!\")\n\telif x < guess:",
        "detail": "1. Number Guessing Game",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "name = input(\"What is your name? \")\n# Here the user is asked to enter the name first\nprint(\"Good Luck ! \", name)\nwords = ['rainbow', 'computer', 'science', 'programming',\n\t\t'python', 'mathematics', 'player', 'condition',\n\t\t'reverse', 'water', 'board', 'geeks']\n# Function will choose one random\n# word from this list of words\nword = random.choice(words)\nprint(\"Guess the characters\")",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "words = ['rainbow', 'computer', 'science', 'programming',\n\t\t'python', 'mathematics', 'player', 'condition',\n\t\t'reverse', 'water', 'board', 'geeks']\n# Function will choose one random\n# word from this list of words\nword = random.choice(words)\nprint(\"Guess the characters\")\nguesses = ''\n# any number of turns can be used here\nturns = 12",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "word = random.choice(words)\nprint(\"Guess the characters\")\nguesses = ''\n# any number of turns can be used here\nturns = 12\nwhile turns > 0:\n\t# counts the number of times a user fails\n\tfailed = 0\n\t# all characters from the input\n\t# word taking one at a time.",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "guesses",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "guesses = ''\n# any number of turns can be used here\nturns = 12\nwhile turns > 0:\n\t# counts the number of times a user fails\n\tfailed = 0\n\t# all characters from the input\n\t# word taking one at a time.\n\tfor char in word:\n\t\t# comparing that character with",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "turns",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "turns = 12\nwhile turns > 0:\n\t# counts the number of times a user fails\n\tfailed = 0\n\t# all characters from the input\n\t# word taking one at a time.\n\tfor char in word:\n\t\t# comparing that character with\n\t\t# the character in guesses\n\t\tif char in guesses:",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "\tfailed",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "\tfailed = 0\n\t# all characters from the input\n\t# word taking one at a time.\n\tfor char in word:\n\t\t# comparing that character with\n\t\t# the character in guesses\n\t\tif char in guesses:\n\t\t\tprint(char, end=\" \")\n\t\telse:\n\t\t\tprint(\"_\")",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "\tguess",
        "kind": 5,
        "importPath": "2. Word Guessing Game",
        "description": "2. Word Guessing Game",
        "peekOfCode": "\tguess = input(\"guess a character:\")\n\t# every input character will be stored in guesses\n\tguesses += guess\n\t# check input with the character in word\n\tif guess not in word:\n\t\tturns -= 1\n\t\t# if the character doesn’t match the word\n\t\t# then “Wrong” will be given as output\n\t\tprint(\"Wrong\")\n\t\t# this will print the number of",
        "detail": "2. Word Guessing Game",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "3. Countdown Timer",
        "description": "3. Countdown Timer",
        "peekOfCode": "def countdown(t):\n    while t:\n        mins, secs = divmod(t, 60)\n        timer = \"{:02d}:{:02d}\".format(mins, secs)\n        print(timer, end=\"\\r\")\n        time.sleep(1)\n        t -= 1\n    print(\"Countdown done!!\")\n# input time in seconds\nt = input(\"Enter the time in seconds: \")",
        "detail": "3. Countdown Timer",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "3. Countdown Timer",
        "description": "3. Countdown Timer",
        "peekOfCode": "t = input(\"Enter the time in seconds: \")\n# function call\ncountdown(int(t))",
        "detail": "3. Countdown Timer",
        "documentation": {}
    },
    {
        "label": "corrector",
        "kind": 5,
        "importPath": "4. Spelling Corrector",
        "description": "4. Spelling Corrector",
        "peekOfCode": "corrector = SpellChecker()\nword = input(\"Enter a Word : \")\nif word in corrector:\n    print(\"Correct\")\nelse:\n    correct_word = corrector.correction(word)\n    print(\"Correct Spelling is \", correct_word)",
        "detail": "4. Spelling Corrector",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "4. Spelling Corrector",
        "description": "4. Spelling Corrector",
        "peekOfCode": "word = input(\"Enter a Word : \")\nif word in corrector:\n    print(\"Correct\")\nelse:\n    correct_word = corrector.correction(word)\n    print(\"Correct Spelling is \", correct_word)",
        "detail": "4. Spelling Corrector",
        "documentation": {}
    },
    {
        "label": "player1",
        "kind": 5,
        "importPath": "5. Rock Paper Scissors Game",
        "description": "5. Rock Paper Scissors Game",
        "peekOfCode": "player1 = input(\"Select Rock, Paper, or Scissor :\").lower()\nplayer2 = random.choice([\"Rock\", \"Paper\", \"Scissor\"]).lower()\nprint(\"Player 2 selected: \", player2)\nif player1 == \"rock\" and player2 == \"paper\":\n    print(\"Player 2 Won\")\nelif player1 == \"paper\" and player2 == \"scissor\":\n    print(\"Player 2 Won\")\nelif player1 == \"scissor\" and player2 == \"rock\":\n    print(\"Player 2 Won\")\nelif player1 == player2:",
        "detail": "5. Rock Paper Scissors Game",
        "documentation": {}
    },
    {
        "label": "player2",
        "kind": 5,
        "importPath": "5. Rock Paper Scissors Game",
        "description": "5. Rock Paper Scissors Game",
        "peekOfCode": "player2 = random.choice([\"Rock\", \"Paper\", \"Scissor\"]).lower()\nprint(\"Player 2 selected: \", player2)\nif player1 == \"rock\" and player2 == \"paper\":\n    print(\"Player 2 Won\")\nelif player1 == \"paper\" and player2 == \"scissor\":\n    print(\"Player 2 Won\")\nelif player1 == \"scissor\" and player2 == \"rock\":\n    print(\"Player 2 Won\")\nelif player1 == player2:\n    print(\"Tie\")",
        "detail": "5. Rock Paper Scissors Game",
        "documentation": {}
    },
    {
        "label": "pdf",
        "kind": 5,
        "importPath": "6. Extract text from Pdf",
        "description": "6. Extract text from Pdf",
        "peekOfCode": "pdf = open(\"Pdf-file-name.pdf\", \"rb\")\nreader = PyPDF2.PdfFileReader(pdf)\npage = reader.getPage(0)\nprint(page.extractText())",
        "detail": "6. Extract text from Pdf",
        "documentation": {}
    },
    {
        "label": "reader",
        "kind": 5,
        "importPath": "6. Extract text from Pdf",
        "description": "6. Extract text from Pdf",
        "peekOfCode": "reader = PyPDF2.PdfFileReader(pdf)\npage = reader.getPage(0)\nprint(page.extractText())",
        "detail": "6. Extract text from Pdf",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "6. Extract text from Pdf",
        "description": "6. Extract text from Pdf",
        "peekOfCode": "page = reader.getPage(0)\nprint(page.extractText())",
        "detail": "6. Extract text from Pdf",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "7. Remove cuss words",
        "description": "7. Remove cuss words",
        "peekOfCode": "text = \"Fuck off and leave me alone for god's sake\"\ncensored = profanity.censor(text)\nprint(censored)",
        "detail": "7. Remove cuss words",
        "documentation": {}
    },
    {
        "label": "censored",
        "kind": 5,
        "importPath": "7. Remove cuss words",
        "description": "7. Remove cuss words",
        "peekOfCode": "censored = profanity.censor(text)\nprint(censored)",
        "detail": "7. Remove cuss words",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "def is_even(number):\n    return number % 2 == 0\ndef get_even_letters(message):\n    even_letters = []\n    for counter in range(0, len(message)):\n        if is_even(counter):\n            even_letters.append(message[counter])\n    return even_letters\ndef get_odd_letters(message):\n    odd_letters = []",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    },
    {
        "label": "get_even_letters",
        "kind": 2,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "def get_even_letters(message):\n    even_letters = []\n    for counter in range(0, len(message)):\n        if is_even(counter):\n            even_letters.append(message[counter])\n    return even_letters\ndef get_odd_letters(message):\n    odd_letters = []\n    for counter in range(0, len(message)):\n        if not is_even(counter):",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    },
    {
        "label": "get_odd_letters",
        "kind": 2,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "def get_odd_letters(message):\n    odd_letters = []\n    for counter in range(0, len(message)):\n        if not is_even(counter):\n            odd_letters.append(message[counter])\n    return odd_letters\ndef swap_letters(message):\n    letter_list = []\n    if not is_even(len(message)):\n        message = message + \"x\"",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    },
    {
        "label": "swap_letters",
        "kind": 2,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "def swap_letters(message):\n    letter_list = []\n    if not is_even(len(message)):\n        message = message + \"x\"\n    even_letters = get_even_letters(message)\n    odd_letters = get_odd_letters(message)\n    for counter in range(0, int(len(message) / 2)):\n        letter_list.append(odd_letters[counter])\n        letter_list.append(even_letters[counter])\n    new_message = \"\".join(letter_list)",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    },
    {
        "label": "get_task",
        "kind": 2,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "def get_task():\n    task = simpledialog.askstring(\"Task\", \"Do you want to encrypt or decrypt?\")\n    return task\ndef get_message():\n    message = simpledialog.askstring(\"Message\", \"Enter the secret message: \")\n    return message\nroot = Tk()\nwhile True:\n    task = get_task()\n    if task == \"encrypt\":",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    },
    {
        "label": "get_message",
        "kind": 2,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "def get_message():\n    message = simpledialog.askstring(\"Message\", \"Enter the secret message: \")\n    return message\nroot = Tk()\nwhile True:\n    task = get_task()\n    if task == \"encrypt\":\n        message = get_message()\n        encrypted = swap_letters(message)\n        messagebox.showinfo(\"Ciphertext of the secret message is:\", encrypted)",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "8. Encrypt and Decrypt using Python",
        "description": "8. Encrypt and Decrypt using Python",
        "peekOfCode": "root = Tk()\nwhile True:\n    task = get_task()\n    if task == \"encrypt\":\n        message = get_message()\n        encrypted = swap_letters(message)\n        messagebox.showinfo(\"Ciphertext of the secret message is:\", encrypted)\n    elif task == \"decrypt\":\n        message = get_message()\n        decrypted = swap_letters(message)",
        "detail": "8. Encrypt and Decrypt using Python",
        "documentation": {}
    }
]